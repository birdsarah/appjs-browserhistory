# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := wrap
### Rules for action "npm":
quiet_cmd_binding_gyp_wrap_target_npm = ACTION binding_gyp_wrap_target_npm $@
cmd_binding_gyp_wrap_target_npm = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; /media/IDD/Documents-IDD/Programs/appjs-latest/appjs/data/add-dependencies.sh /media/IDD/Documents-IDD/Programs/appjs-latest/appjs/app/data/node_modules/appjs-linux

.: obj := $(abs_obj)
.: builddir := $(abs_builddir)
.: TOOLSET := $(TOOLSET)
.: $(srcdir)/. FORCE_DO_CMD
	$(call do_cmd,binding_gyp_wrap_target_npm)

all_deps += .
action_binding_gyp_wrap_target_npm_outputs := .


### Generated for copy rule.
/media/IDD/Documents-IDD/Programs/appjs-latest/appjs/app/data/node_modules/appjs: TOOLSET := $(TOOLSET)
/media/IDD/Documents-IDD/Programs/appjs-latest/appjs/app/data/node_modules/appjs: /media/IDD/Documents-IDD/Programs/appjs-latest/appjs/data/common/appjs FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += /media/IDD/Documents-IDD/Programs/appjs-latest/appjs/app/data/node_modules/appjs
/media/IDD/Documents-IDD/Programs/appjs-latest/appjs/app/data/node_modules/npm: TOOLSET := $(TOOLSET)
/media/IDD/Documents-IDD/Programs/appjs-latest/appjs/app/data/node_modules/npm: /media/IDD/Documents-IDD/Programs/appjs-latest/appjs/node_modules/npm FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += /media/IDD/Documents-IDD/Programs/appjs-latest/appjs/app/data/node_modules/npm
binding_gyp_wrap_target_copies = /media/IDD/Documents-IDD/Programs/appjs-latest/appjs/app/data/node_modules/appjs /media/IDD/Documents-IDD/Programs/appjs-latest/appjs/app/data/node_modules/npm

### Rules for final target.
# Build our special outputs first.
$(obj).target/wrap.stamp.node: | $(action_binding_gyp_wrap_target_npm_outputs) $(binding_gyp_wrap_target_copies)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_wrap_target_npm_outputs) $(binding_gyp_wrap_target_copies): | $(obj).target/publish.stamp.node

$(obj).target/wrap.stamp.node: TOOLSET := $(TOOLSET)
$(obj).target/wrap.stamp.node: $(obj).target/publish.stamp.node FORCE_DO_CMD
	$(call do_cmd,touch)

all_deps += $(obj).target/wrap.stamp.node
# Add target alias
.PHONY: wrap
wrap: $(obj).target/wrap.stamp.node

# Add target alias to "all" target.
.PHONY: all
all: wrap

